from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional
import logging
import os
import asyncio
import ipaddress
import traceback
from contextlib import asynccontextmanager

# ‡∏•‡∏≠‡∏á import pyzk ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
try:
    from pyzk import ZK
    PYZK_AVAILABLE = True
    print("‚úÖ pyzk library ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
except ImportError:
    try:
        from zk import ZK
        PYZK_AVAILABLE = True
        print("‚úÖ zk library ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    except ImportError:
        PYZK_AVAILABLE = False
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ZKTeco library")

import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import time

# === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ===
sync_running = False
last_sync_time = None
sync_status = "Not started"
sync_count = 0

# === Logging Setup ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === CONFIG ===
DEVICE_IP = os.getenv("ZKTECO_IP", "192.168.1.2")
DEVICE_PORT = int(os.getenv("DEVICE_PORT", 4370))
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE", "credentials.json")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "ZKTeco Attendance")
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME", "Attendance")
SYNC_INTERVAL_SECONDS = int(os.getenv("SYNC_INTERVAL_SECONDS", 300))  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ IP ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ===
def find_zkteco_device(target_ip=None, port=4370, timeout=3):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco"""
    if not PYZK_AVAILABLE:
        logger.error("ZKTeco library ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        return None
        
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ IP ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ IP ‡∏ô‡∏±‡πâ‡∏ô
    if target_ip:
        logger.info(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IP: {target_ip}")
        try:
            zk = ZK(target_ip, port=port, timeout=timeout)
            conn = zk.connect()
            if conn:
                logger.info(f"‚úÖ ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡∏ó‡∏µ‡πà IP: {target_ip}")
                conn.disconnect()
                return target_ip
        except Exception as e:
            logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {target_ip}: {e}")
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
    logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢...")
    
    # ‡∏•‡∏≠‡∏á IP ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    base_ip = "192.168.1."
    common_ips = [2, 100, 200, 1, 254, 50, 101, 102, 103]
    
    for last_octet in common_ips:
        ip = f"{base_ip}{last_octet}"
        try:
            zk = ZK(ip, port=port, timeout=timeout)
            conn = zk.connect()
            if conn:
                logger.info(f"‚úÖ ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡∏ó‡∏µ‡πà IP: {ip}")
                conn.disconnect()
                return ip
        except Exception:
            continue
    
    logger.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
    return None

# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å ===
class ZKTecoGoogleSheets:
    def __init__(self, device_ip, device_port=4370):
        self.device_ip = device_ip
        self.device_port = device_port

    def setup_google_sheets(self, credentials_file, spreadsheet_name, worksheet_name):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets"""
        try:
            creds = Credentials.from_service_account_file(credentials_file, scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"
            ])
            gc = gspread.authorize(creds)
            
            # ‡πÄ‡∏õ‡∏¥‡∏î spreadsheet
            try:
                sh = gc.open(spreadsheet_name)
            except gspread.SpreadsheetNotFound:
                sh = gc.create(spreadsheet_name)
                logger.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á spreadsheet ‡πÉ‡∏´‡∏°‡πà: {spreadsheet_name}")
            
            # ‡πÄ‡∏õ‡∏¥‡∏î worksheet
            try:
                worksheet = sh.worksheet(worksheet_name)
            except gspread.WorksheetNotFound:
                worksheet = sh.add_worksheet(title=worksheet_name, rows="1000", cols="20")
                logger.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á worksheet ‡πÉ‡∏´‡∏°‡πà: {worksheet_name}")
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ headers
            headers = ["ID", "User ID", "Name", "Timestamp", "Status", "Punch", "Date", "Time", "Device IP"]
            try:
                existing_headers = worksheet.row_values(1)
                if not existing_headers or existing_headers != headers:
                    worksheet.update('A1:I1', [headers])
                    logger.info("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó headers ‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó headers: {e}")
            
            return worksheet
            
        except Exception as e:
            logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets: {e}")
            return None

    def get_users_info(self, conn):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        try:
            users = conn.get_users()
            user_dict = {}
            for user in users:
                user_dict[str(user.uid)] = {
                    'name': getattr(user, 'name', f'User_{user.uid}'),
                    'uid': user.uid
                }
            logger.info(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ {len(user_dict)} ‡∏Ñ‡∏ô")
            return user_dict
        except Exception as e:
            logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {e}")
            return {}

    def run_sync(self, credentials_file, spreadsheet_name, worksheet_name):
        """‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å"""
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
            worksheet = self.setup_google_sheets(credentials_file, spreadsheet_name, worksheet_name)
            if not worksheet:
                return False

            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ZKTeco
            logger.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ZKTeco ‡∏ó‡∏µ‡πà {self.device_ip}:{self.device_port}")
            zk = ZK(self.device_ip, port=self.device_port, timeout=30)
            conn = zk.connect()
            if not conn:
                raise Exception("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ZKTeco ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ZKTeco ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            users_info = self.get_users_info(conn)

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô...")
            attendances = conn.get_attendance()
            conn.disconnect()

            if not attendances:
                logger.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô")
                return True

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2025
            filtered_data = []
            for att in attendances:
                if att.timestamp and att.timestamp >= datetime(2025, 1, 1):
                    user_info = users_info.get(str(att.user_id), {})
                    user_name = user_info.get('name', f'User_{att.user_id}')
                    
                    row = [
                        f"{att.user_id}_{att.timestamp.strftime('%Y%m%d_%H%M%S')}",  # Unique ID
                        str(att.user_id),
                        user_name,
                        att.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                        getattr(att, 'status', 0),
                        int(att.punch),
                        att.timestamp.strftime('%Y-%m-%d'),
                        att.timestamp.strftime('%H:%M:%S'),
                        self.device_ip
                    ]
                    filtered_data.append(row)

            logger.info(f"‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ {len(filtered_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏õ‡∏µ 2025)")

            if not filtered_data:
                logger.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2025")
                return True

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            try:
                existing_data = worksheet.get_all_values()
                existing_set = set()
                for row in existing_data[1:]:  # Skip header
                    if len(row) >= 8:
                        existing_set.add((row[1], row[6], row[7]))  # user_id, date, time
            except Exception as e:
                logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {e}")
                existing_set = set()

            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            new_rows = []
            for row in filtered_data:
                key = (row[1], row[6], row[7])  # user_id, date, time
                if key not in existing_set:
                    new_rows.append(row)

            if new_rows:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                worksheet.append_rows(new_rows)
                logger.info(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà {len(new_rows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°")

            return True

        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå: {e}")
            logger.error(traceback.format_exc())
            return False

# === BACKGROUND SYNC ===
async def background_sync_loop():
    """‡∏•‡∏π‡∏õ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á"""
    global sync_running, last_sync_time, sync_status, sync_count
    
    while True:
        try:
            if sync_running:
                await asyncio.sleep(30)
                continue
                
            sync_running = True
            sync_status = "Running"
            logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            device_ip = find_zkteco_device(DEVICE_IP)
            if not device_ip:
                sync_status = "Device not found"
                logger.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ZKTeco")
                sync_running = False
                await asyncio.sleep(SYNC_INTERVAL_SECONDS)
                continue

            # ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            zk_sync = ZKTecoGoogleSheets(device_ip, DEVICE_PORT)
            success = zk_sync.run_sync(CREDENTIALS_FILE, SPREADSHEET_NAME, WORKSHEET_NAME)
            
            if success:
                sync_status = "Success"
                sync_count += 1
                last_sync_time = datetime.now()
                logger.info("‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                sync_status = "Failed"
                logger.warning("‚ùå ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                
        except Exception as e:
            sync_status = f"Error: {str(e)}"
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {e}")
        finally:
            sync_running = False
            await asyncio.sleep(SYNC_INTERVAL_SECONDS)

# === FastAPI Lifespan ===
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ FastAPI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    if PYZK_AVAILABLE:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° background sync
        asyncio.create_task(background_sync_loop())
        logger.info("üîÑ Background sync ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    else:
        logger.warning("‚ö†Ô∏è ZKTeco library ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ auto sync ‡πÑ‡∏î‡πâ")
    
    yield
    
    # Shutdown
    logger.info("üõë FastAPI ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

# === FASTAPI APP ===
app = FastAPI(lifespan=lifespan, title="ZKTeco API", version="1.0.0")

# === ENDPOINT: Root ===
@app.get("/")
def read_root():
    return {
        "message": "ZKTeco FastAPI is running ‚úÖ",
        "pyzk_available": PYZK_AVAILABLE,
        "sync_status": sync_status,
        "sync_count": sync_count,
        "last_sync": last_sync_time.isoformat() if last_sync_time else None,
        "sync_running": sync_running,
        "device_ip": DEVICE_IP
    }

# === ENDPOINT: Manual sync ===
@app.get("/sync")
def sync_attendance():
    """‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
    if not PYZK_AVAILABLE:
        raise HTTPException(status_code=500, detail="ZKTeco library ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
    if sync_running:
        raise HTTPException(status_code=409, detail="‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
    
    try:
        device_ip = find_zkteco_device(DEVICE_IP)
        if not device_ip:
            raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco")
        
        zk_sync = ZKTecoGoogleSheets(device_ip, DEVICE_PORT)
        success = zk_sync.run_sync(CREDENTIALS_FILE, SPREADSHEET_NAME, WORKSHEET_NAME)
        
        if success:
            return {
                "status": "success", 
                "message": "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
                "device_ip": device_ip,
                "timestamp": datetime.now().isoformat()
            }
        else:
            raise HTTPException(status_code=500, detail="‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === ENDPOINT: Status ===
@app.get("/status")
def get_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    return {
        "status": "running",
        "pyzk_available": PYZK_AVAILABLE,
        "sync_status": sync_status,
        "sync_count": sync_count,
        "sync_running": sync_running,
        "last_sync": last_sync_time.isoformat() if last_sync_time else None,
        "device_ip": DEVICE_IP,
        "sync_interval": SYNC_INTERVAL_SECONDS,
        "timestamp": datetime.now().isoformat()
    }

# === ENDPOINT: Test device connection ===
@app.get("/test/device")
def test_device_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    if not PYZK_AVAILABLE:
        raise HTTPException(status_code=500, detail="ZKTeco library ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
    device_ip = find_zkteco_device(DEVICE_IP)
    if not device_ip:
        raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco")

    try:
        zk = ZK(device_ip, port=DEVICE_PORT, timeout=30)
        conn = zk.connect()
        if conn:
            try:
                info = {
                    "device_ip": device_ip,
                    "device_name": getattr(conn, 'get_device_name', lambda: 'Unknown')(),
                    "firmware": getattr(conn, 'get_firmware_version', lambda: 'Unknown')(),
                    "platform": getattr(conn, 'get_platform', lambda: 'Unknown')(),
                    "connection_status": "Connected ‚úÖ"
                }
                
                # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
                try:
                    users = conn.get_users()
                    info["users_count"] = len(users) if users else 0
                except:
                    info["users_count"] = "Unable to fetch"
                
                try:
                    attendances = conn.get_attendance()
                    info["attendance_count"] = len(attendances) if attendances else 0
                except:
                    info["attendance_count"] = "Unable to fetch"
                
                conn.disconnect()
                return {"status": "success", "device_info": info}
                
            except Exception as e:
                conn.disconnect()
                raise HTTPException(status_code=500, detail=f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {str(e)}")
        else:
            raise HTTPException(status_code=500, detail="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === ENDPOINT: Test Google Sheets ===
@app.get("/test/sheets")
def test_sheets_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets"""
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=[
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ])
        gc = gspread.authorize(creds)
        sh = gc.open(SPREADSHEET_NAME)
        worksheet = sh.worksheet(WORKSHEET_NAME)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
        all_records = worksheet.get_all_values()
        
        return {
            "status": "success ‚úÖ",
            "spreadsheet_name": SPREADSHEET_NAME,
            "worksheet_name": WORKSHEET_NAME,
            "total_rows": len(all_records),
            "headers": all_records[0] if all_records else [],
            "connection_status": "Connected to Google Sheets ‚úÖ"
        }
        
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === Health Check ===
@app.get("/health")
def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy", 
        "timestamp": datetime.now().isoformat(),
        "pyzk_available": PYZK_AVAILABLE
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting ZKTeco FastAPI server...")
    uvicorn.run(app, host="0.0.0.0", port=8000)

    # ‡πÉ‡∏ô zkteco_fastapi.py ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
CREDENTIALS_JSON = os.getenv("CREDENTIALS_JSON")
if CREDENTIALS_JSON:
    import tempfile
    import json
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå temp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö credentials
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        f.write(CREDENTIALS_JSON)
        CREDENTIALS_FILE = f.name
