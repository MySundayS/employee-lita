from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional
import logging
import os
import asyncio
import ipaddress
from zk import ZK
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import time

# === Logging Setup ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === Config ===
DEVICE_PORT = int(os.getenv("DEVICE_PORT", 4370))
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE", "credentials.json")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "ZKTeco Attendance")
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME", "Attendance")
SYNC_INTERVAL_SECONDS = int(os.getenv("SYNC_INTERVAL_SECONDS", 5 * 60))  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
RETRY_ATTEMPTS = 3
RETRY_DELAY = 10  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ IP ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ===
def find_zkteco_device(subnet="192.168.1.2", port=4370):
    logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢...")
    for ip in ipaddress.IPv4Network(subnet):
        ip = str(ip)
        for attempt in range(RETRY_ATTEMPTS):
            try:
                zk = ZK(ip, port=port, timeout=2)
                conn = zk.connect()
                if conn:
                    logger.info(f"‚úÖ ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡∏ó‡∏µ‡πà IP: {ip}")
                    conn.disconnect()
                    return ip
                break
            except Exception as e:
                logger.warning(f"‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt+1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP {ip}: {e}")
                time.sleep(RETRY_DELAY)
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
    return None

# === ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å ===
class ZKTecoGoogleSheets:
    def __init__(self, device_ip, device_port=4370, late_threshold_hour=8, late_threshold_minute=0):
        self.device_ip = device_ip
        self.device_port = device_port
        self.late_threshold_hour = late_threshold_hour
        self.late_threshold_minute = late_threshold_minute

    def run_sync(self, credentials_file, spreadsheet_name, worksheet_name):
        for attempt in range(RETRY_ATTEMPTS):
            try:
                creds = Credentials.from_service_account_file(credentials_file, scopes=[
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive"
                ])
                gc = gspread.authorize(creds)
                sh = gc.open(spreadsheet_name)
                worksheet = sh.worksheet(worksheet_name)

                if not self.device_ip:
                    raise Exception("‡πÑ‡∏°‡πà‡∏û‡∏ö IP ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco")

                zk = ZK(self.device_ip, port=self.device_port, timeout=30)
                conn = zk.connect()
                if not conn:
                    raise Exception("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ZKTeco ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                attendances = conn.get_attendance()
                data = []
                for att in attendances:
                    if att.timestamp and att.timestamp >= datetime(2025, 1, 1):
                        row = [
                            "", str(att.user_id), "", att.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                            "", int(att.punch), att.timestamp.strftime('%Y-%m-%d'),
                            att.timestamp.strftime('%H:%M:%S'), self.device_ip
                        ]
                        data.append(row)

                existing_data = worksheet.get_all_values()
                existing_set = set((r[1], r[6], r[7]) for r in existing_data[1:])

                new_rows = [row for row in data if (row[1], row[6], row[7]) not in existing_set]
                if new_rows:
                    worksheet.append_rows(new_rows)
                    logger.info(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {len(new_rows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Google Sheets")

                conn.disconnect()
                return True

            except Exception as e:
                logger.error(f"[‚ùå SYNC ERROR] ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt+1}: {e}")
                if attempt < RETRY_ATTEMPTS - 1:
                    time.sleep(RETRY_DELAY)
                continue
        return False

# === FastAPI App ===
app = FastAPI()

# === Background Sync Task ===
async def background_sync_loop():
    while True:
        try:
            logger.info("[‚è±Ô∏è SYNC] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
            device_ip = find_zkteco_device()
            if not device_ip:
                logger.warning("[‚ö†Ô∏è SYNC] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ZKTeco")
                await asyncio.sleep(SYNC_INTERVAL_SECONDS)
                continue

            zk_sync = ZKTecoGoogleSheets(
                device_ip, DEVICE_PORT, late_threshold_hour=8, late_threshold_minute=0
            )
            success = zk_sync.run_sync(CREDENTIALS_FILE, SPREADSHEET_NAME, WORKSHEET_NAME)
            if success:
                logger.info("[‚úÖ SYNC] ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                logger.warning("[‚ö†Ô∏è SYNC] ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        except Exception as e:
            logger.error(f"[‚ùå SYNC ERROR] {e}")
        await asyncio.sleep(SYNC_INTERVAL_SECONDS)

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ FastAPI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    asyncio.create_task(background_sync_loop())

# === Endpoints ===
@app.get("/")
def read_root():
    return {"message": "ZKTeco FastAPI is running ‚úÖ"}

@app.get("/sync")
def sync_attendance():
    try:
        device_ip = find_zkteco_device()
        if not device_ip:
            raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco")
        
        zk_sync = ZKTecoGoogleSheets(device_ip, DEVICE_PORT, late_threshold_hour=8, late_threshold_minute=0)
        success = zk_sync.run_sync(CREDENTIALS_FILE, SPREADSHEET_NAME, WORKSHEET_NAME)
        if success:
            return {"status": "success", "message": "‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ"}
        else:
            raise HTTPException(status_code=500, detail="‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå")
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status")
def get_status():
    try:
        logger.info("[üìä STATUS] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
        device_ip = find_zkteco_device()
        if not device_ip:
            raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco")
        
        zk_sync = ZKTecoGoogleSheets(device_ip, DEVICE_PORT, late_threshold_hour=8, late_threshold_minute=0)
        success = zk_sync.run_sync(CREDENTIALS_FILE, SPREADSHEET_NAME, WORKSHEET_NAME)
        if success:
            return {"status": "success", "message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‚úÖ", "last_sync": datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        else:
            raise HTTPException(status_code=500, detail="‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå")
    except Exception as e:
        logger.error(f"[‚ùå STATUS ERROR] {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/test/device")
def test_device_connection():
    device_ip = find_zkteco_device()
    if not device_ip:
        raise HTTPException(status_code=500, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco")

    zk = ZK(device_ip, port=DEVICE_PORT, timeout=30)
    try:
        conn = zk.connect()
        if conn:
            info = {
                "device_name": conn.get_device_name(),
                "firmware": conn.get_firmware_version(),
                "platform": conn.get_platform(),
            }
            conn.disconnect()
            return {"status": "success", "device_info": info}


        async def background_sync_loop():
    while True:
        try:
            logger.info("[‚è±Ô∏è SYNC] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
            device_ip = find_zkteco_device()
            if not device_ip:
                logger.warning("[‚ö†Ô∏è SYNC] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ZKTeco")
                await asyncio.sleep(SYNC_INTERVAL_SECONDS)
                continue
            zk_sync = ZKTecoGoogleSheets(device_ip, DEVICE_PORT, late_threshold_hour=8, late_threshold_minute=0)
            success = zk_sync.run_sync(CREDENTIALS_FILE, SPREADSHEET_NAME, WORKSHEET_NAME)
            if success:
                logger.info("[‚úÖ SYNC] ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                logger.warning("[‚ö†Ô∏è SYNC] ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        except Exception as e:
            logger.error(f"[‚ùå SYNC ERROR] {e}")
            await asyncio.sleep(SYNC_INTERVAL_SECONDS)  # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏°‡∏µ error
        else:
            raise HTTPException(status_code=500, detail="‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
